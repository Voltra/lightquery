{"version":3,"sources":["../../src/CssEngine.js"],"names":["Sizzle","UnimplementedError","lqHelpers","AbstractCssEngine","findAll","selector","context","undefined","previousResults","matchesSelector","element","filterMatches","elements","SizzleCssEngine","matches","arrayLike","toArray","cssEngine"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,kBAAP;AAEA;;;;;AAIA,MAAMC,iBAAN,CAAuB;AACtB;;;;;;;;AAQAC,EAAAA,OAAO,CAACC,QAAD,EAAWC,OAAO,GAAGC,SAArB,EAAgCC,eAAe,GAAG,EAAlD,EAAqD;AAC3D,UAAM,IAAIP,kBAAJ,CAAuB,yFAAvB,CAAN;AACA;AAED;;;;;;;;;AAOAQ,EAAAA,eAAe,CAACJ,QAAD,EAAWK,OAAX,EAAmB;AACjC,UAAM,IAAIT,kBAAJ,CAAuB,4EAAvB,CAAN;AACA;AAED;;;;;;;;;AAOAU,EAAAA,aAAa,CAACN,QAAD,EAAWO,QAAX,EAAoB;AAChC,UAAM,IAAIX,kBAAJ,CAAuB,2EAAvB,CAAN;AACA;;AAjCqB;AAoCvB;;;;;;AAIA,MAAMY,eAAN,SAA8BV,iBAA9B,CAA+C;AAC9C;;;;AAIAC,EAAAA,OAAO,CAACC,QAAD,EAAWC,OAAO,GAAGC,SAArB,EAAgCC,eAAe,GAAG,EAAlD,EAAqD;AAC3D,WAAOR,MAAM,CAACK,QAAD,EAAWC,OAAX,EAAoBE,eAApB,CAAb;AACA;AAED;;;;;;AAIAC,EAAAA,eAAe,CAACJ,QAAD,EAAWK,OAAX,EAAmB;AACjC,WAAOV,MAAM,CAACS,eAAP,CAAuBC,OAAvB,EAAgCL,QAAhC,CAAP;AACA;AAED;;;;;;AAIAM,EAAAA,aAAa,CAACN,QAAD,EAAWO,QAAX,EAAoB;AAChC,WAAOZ,MAAM,CAACc,OAAP,CAAeT,QAAf,EAAyBH,SAAS,CAACa,SAAV,CAAoBC,OAApB,CAA4BJ,QAA5B,CAAzB,CAAP;AACA;;AAvB6C;AA0B/C;;;;;AAGA,MAAMK,SAAS,GAAG,IAAIJ,eAAJ,EAAlB;AAGA,SACCV,iBADD,EAECU,eAFD,EAGCI,SAHD","sourceRoot":"./src/","sourcesContent":["import Sizzle from \"sizzle\"\r\nimport UnimplementedError from \"./errors/UnimplementedError\"\r\nimport lqHelpers from \"./utils/helpers\"\r\nimport \"./utils/typedefs\"\r\n\r\n/**\r\n * @class\r\n * @classdesc Base class for all Css selection engines\r\n */\r\nclass AbstractCssEngine{\r\n\t/**\r\n\t * Find all the elements that match the given selector in the given context and append them to the previous results\r\n\t * @param {string}            selector - The selector to match\r\n\t * @param {DomElementType|undefined} [context = undefined]  - The context in which to lookup elements\r\n\t * @param {Iterable<DomElementType>} [previousResults = []] - The previous set of results\r\n\t * @returns {Iterable<DomElementType>}\r\n\t * @abstract\r\n\t */\r\n\tfindAll(selector, context = undefined, previousResults = []){\r\n\t\tthrow new UnimplementedError(\"Call to unimplemented AbstractCssEngine#findAll(selector, [context, [previousResults]])\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Determine whether or not the given element matches the given selector\r\n\t * @param {string}  selector - The selector to match against\r\n\t * @param {DomElementType} element - The element to match against the selector\r\n\t * @returns {boolean}\r\n\t * @abstract\r\n\t */\r\n\tmatchesSelector(selector, element){\r\n\t\tthrow new UnimplementedError(\"Call to unimplemented AbstractCssEngine#matchesSelector(selector, element)\");\r\n\t}\r\n\t\r\n\t/**\r\n\t * Only keep the elements that match the given selector\r\n\t * @param {string}            selector - The selector to match against\r\n\t * @param {Iterable<DomElementType>} elements - The elements to filter\r\n\t * @returns {Iterable<DomElementType>}\r\n\t * @abstract\r\n\t */\r\n\tfilterMatches(selector, elements){\r\n\t\tthrow new UnimplementedError(\"Call to unimplemented AbstractCssEngine#filterMatches(selector, elements)\");\r\n\t}\r\n}\r\n\r\n/**\r\n * @class\r\n * @classdesc Css engine based on the Sizzle library\r\n */\r\nclass SizzleCssEngine extends AbstractCssEngine{\r\n\t/**\r\n\t * @override\r\n\t * @inheritdoc\r\n\t */\r\n\tfindAll(selector, context = undefined, previousResults = []){\r\n\t\treturn Sizzle(selector, context, previousResults);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @override\r\n\t * @inheritdoc\r\n\t */\r\n\tmatchesSelector(selector, element){\r\n\t\treturn Sizzle.matchesSelector(element, selector);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @override\r\n\t * @inheritdoc\r\n\t */\r\n\tfilterMatches(selector, elements){\r\n\t\treturn Sizzle.matches(selector, lqHelpers.arrayLike.toArray(elements));\r\n\t}\r\n}\r\n\r\n/**\r\n * @constant {AbstractCssEngine} cssEngine - The css engine for lightquery\r\n */\r\nconst cssEngine = new SizzleCssEngine();\r\n\r\n\r\nexport {\r\n\tAbstractCssEngine,\r\n\tSizzleCssEngine,\r\n\tcssEngine,\r\n}"],"file":"CssEngine.js"}