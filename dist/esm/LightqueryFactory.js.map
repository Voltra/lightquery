{"version":3,"sources":["../../src/LightqueryFactory.js"],"names":["Callable","LightqueryCollection","InvalidArgumentError","lqHelpers","UnsupportedError","rethrow","e","LightqueryFactoryImplDetails","constructor","self","collectionClass","strictMode","collClass","lightquery","plugins","instance","Set","global","ifStrict","callback","factory","args","emptySelection","defaultPluginType","LightqueryFactory","Object","defineProperty","enumerable","writable","configurable","value","__call","selector","context","undefined","previousResults","ready","__","hasPlugin","pluginName","pluginType","nameForStrict","plugin","isValidPluginType","prototype","pluginRepo","has","registerPlugin","pname","string","capitalizeFirst","doForPluginType","onGlobal","onInstance","onUnknown","add","removePlugin","delete","cloneLightquery","isStrictModeOn","setStrictMode","newValue","turnStrictModeOn","turnStrictModeOff","doWithoutStrictMode","wasStrict","document","resize","listener","window","from","select","extend","target","objects","assign","cssVar","variable","ret","documentElement","create","htmlString","errorFactory","createRange","range","createContextualFragment","el"],"mappings":"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","sourceRoot":"./src/","sourcesContent":["import Callable from \"./utils/Callable\"\r\nimport LightqueryCollection from \"./LightqueryCollection\"\r\nimport InvalidArgumentError from \"./errors/InvalidArgumentError\"\r\nimport lqHelpers from \"./utils/helpers\"\r\nimport \"./utils/typedefs\"\r\nimport UnsupportedError from \"./errors/UnsupportedError\";\r\n\r\n/**\r\n * @callback LightqueryFactory~selectCallback\r\n * @param {string} selector\r\n * @returns {LightqueryCollection}\r\n */\r\n\r\n/**\r\n * @typedef {object} LightqueryFactorySelectObject\r\n * @property {LightqueryFactory~selectCallback} select\r\n */\r\n\r\n\r\nconst rethrow = e => () => throw e;\r\n\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc Class that represents the implementation details of a lightquery factory\r\n */\r\nclass LightqueryFactoryImplDetails{\r\n\t/**\r\n\t * @param {LightqueryFactory} self - The LightqueryFactory instance\r\n\t * @param {typeof LightqueryCollection} [collectionClass = LightqueryCollection] - The class used to construct the result collections\r\n\t * @param {boolean} [strictMode = true] - Whether or not to throw exceptions instead of silently failing\r\n\t */\r\n\tconstructor(self, collectionClass = LightqueryCollection, strictMode = true){\r\n\t    const collClass = class extends collectionClass{}; // Allows to customize on a per factory basis\r\n        collClass.lightquery = self;\r\n\r\n\t\t/**\r\n\t\t * @property {typeof LightqueryCollection} - The class used to generate a results collection\r\n\t\t */\r\n\t\tthis.collectionClass = collClass;\r\n\t\tthis.strictMode = strictMode;\r\n\r\n\r\n\r\n\t\t/**\r\n\t\t * @property {{instance: Set<string>, global: Set<string>}} plugins - Sets of registered plugins\r\n\t\t */\r\n\t\tthis.plugins = {\r\n\t\t\tinstance: new Set(),\r\n\t\t\tglobal: new Set(),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Execute a callback if strict mode is on\r\n\t * @param {Callback} callback - The callback to execute\r\n\t */\r\n\tifStrict(callback){\r\n\t\tif(this.strictMode)\r\n\t\t\tcallback();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a lightquery collection from arguments\r\n\t * @param {...any}               args - The arguments for the constructor\r\n\t * @returns {LightqueryCollection}\r\n\t */\r\n\tfactory(...args){\r\n\t\treturn new this.collectionClass(...args);\r\n\t}\r\n\r\n\t/**\r\n\t * A factory for an empty selection\r\n\t * @returns {LightqueryCollection}\r\n\t */\r\n\temptySelection(){\r\n\t\treturn this.factory(\"\");\r\n\t}\r\n}\r\n\r\n/**\r\n * @constant {PluginType} defaultPluginType\r\n * @default\r\n */\r\nconst defaultPluginType = \"instance\";\r\n\r\n/**\r\n * @class\r\n * @classdesc Class that represents the factory function to query the DOM with lightquery\r\n */\r\nclass LightqueryFactory extends Callable{\r\n\t/**\r\n\t * Create a lightquery factory (that's what's behind µ)\r\n\t * @param {typeof LightqueryCollection} [collectionClass = LightqueryCollection] - The class used to construct the result collections\r\n\t * @param {boolean} [strictMode = true] - Whether or not to throw exceptions instead of silently failing\r\n\t */\r\n\tconstructor(collectionClass = LightqueryCollection, strictMode = true){\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * Private methods and properties\r\n\t\t * @protected\r\n\t\t * @readonly\r\n\t\t * @property {LightqueryFactoryImplDetails} __ - The protected implementation details\r\n\t\t */\r\n\t\tObject.defineProperty(this, \"__\", {\r\n\t\t\tenumerable: false,\r\n\t\t\twritable: false,\r\n\t\t\tconfigurable: false,\r\n\t\t\tvalue: new LightqueryFactoryImplDetails(this, collectionClass, strictMode),\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @override\r\n\t * @param {Selector} selector\r\n\t * @param {DomElementType|undefined} context\r\n\t * @param {Iterable<DomElementType>|undefined} previousResults\r\n\t * @returns {LightqueryCollection}\r\n\t */\r\n\t__call(selector, context = undefined, previousResults = []){\r\n\t\ttry{\r\n\t\t\tif(typeof selector === \"function\")\r\n\t\t\t\treturn this.ready(selector);\r\n\t\t\telse\r\n\t\t\t\treturn this.__.factory(selector, context, previousResults);\r\n\t\t}catch(e){\r\n\t\t\tthis.__.ifStrict(rethrow(e));\r\n\t\t\treturn this.__.emptySelection();\r\n\t\t}\r\n\t}\r\n\r\n    /**\r\n     * Determine whether or not the plugin is registered\r\n     * @param {string} pluginName - The plugin's name\r\n     * @param {PluginType} [pluginType = defaultPluginType] - The plugin's type\r\n     * @param {string} [nameForStrict = \"\"] - The name for error strings when strict mode is on\r\n     * @returns {boolean}\r\n     */\r\n\thasPlugin(pluginName, pluginType = defaultPluginType, nameForStrict = \"\"){\r\n        if(typeof pluginName !== \"string\"){\r\n            this.__.ifStrict(() => throw new InvalidArgumentError(`Expected pluginName to be a string in LightqueryFactory${nameForStrict}`));\r\n            return false;\r\n        }\r\n\r\n        if(typeof pluginType !== \"string\"){\r\n            this.__.ifStrict(() => throw new InvalidArgumentError(`Expected pluginType to be a string in LightqueryFactory${nameForStrict}`));\r\n            return false;\r\n        }\r\n\r\n\t    if(!lqHelpers.plugin.isValidPluginType(pluginType)){\r\n\t        this.__.ifStrict(() => throw new InvalidArgumentError(`Invalid plugin type \"${pluginType}\" in LightqueryFactory${nameForStrict}`));\r\n\t        return false;\r\n        }\r\n\r\n\t    if(pluginType === \"instance\" && pluginName in LightqueryCollection.prototype){\r\n\t    \tthis.__.ifStrict(() => throw new InvalidArgumentError(`Invalid plugin name \"${pluginName}\", it's the name of a core instance method`));\r\n\t    \treturn true;\r\n\t\t}else if(pluginType === \"global\" && pluginName in LightqueryFactory.prototype){\r\n\t    \tthis.__.ifStrict(() => throw new InvalidArgumentError(`Invalid plugin name \"${pluginName}\", it's the name of a core global method`));\r\n\t    \treturn true;\r\n\t\t}\r\n\r\n        const pluginRepo = this.__.plugins[pluginType];\r\n\t    return pluginRepo.has(pluginName);\r\n    }\r\n\r\n    /**\r\n     * Register a plugin\r\n     * @param {string} pluginName\r\n     * @param {Function|any} plugin\r\n     * @param {PluginType} pluginType\r\n     * @returns {LightqueryFactory}\r\n     */\r\n\tregisterPlugin(pluginName, plugin, pluginType = defaultPluginType){\r\n\t    const hasPlugin = this.hasPlugin(pluginName, pluginType, \"#registerPlugin(pluginName, plugin, pluginType)\");\r\n\r\n\t\t/*\r\n\t\t//NOTE: Commented out for more flexibility\r\n\t\tif(typeof plugin !== \"function\")){\r\n\t\t\tthis.__.ifStrict(() => throw new InvalidArgumentError(\"Expected plugin to be a function or an object in LightqueryFactory#registerPlugin(pluginName, plugin, pluginType)\"));\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\t*/\r\n\r\n\t\tif(hasPlugin){ // if plugin is already registered\r\n            const pname = lqHelpers.string.capitalizeFirst(pluginType);\r\n\t\t\tthis.__.ifStrict(() => throw new InvalidArgumentError(`${pname} plugin \"${pluginName}\" already registered`));\r\n\t\t}else{\r\n\t\t\tlqHelpers.plugin.doForPluginType({\r\n\t\t\t\tpluginType,\r\n\t\t\t\tonGlobal: () => this[pluginName] = plugin,\r\n\t\t\t\tonInstance: () => this.__.collectionClass.prototype[pluginName] = plugin,\r\n\t\t\t\tonUnknown: () => {\r\n\t\t\t\t\tthis.__.ifStrict(() => throw new InvalidArgumentError(\"Invalid pluginType in LightqueryFactory#registerPlugin(pluginName, plugin, pluginType)\"));\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tthis.__.plugins[pluginType].add(pluginName);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n    /**\r\n     * Remove a registered plugin\r\n     * @param pluginName\r\n     * @param pluginType\r\n     * @returns {LightqueryFactory}\r\n     */\r\n\tremovePlugin(pluginName, pluginType = defaultPluginType){\r\n\t    const hasPlugin = this.hasPlugin(pluginName, pluginType, \"#removePlugin(pluginName, pluginType)\");\r\n\r\n\t    if(hasPlugin){\r\n\t        lqHelpers.plugin.doForPluginType({\r\n                pluginType,\r\n                onGlobal: () => this[pluginName] = undefined,\r\n                onInstance: () => this.__.collectionClass.prototype[pluginName] = undefined,\r\n                onUnknown: () => {\r\n                    this.__.ifStrict(() => throw new InvalidArgumentError(\"Invalid pluginType in LightqueryFactory#removePlugin(pluginName, pluginType)\"));\r\n                },\r\n            });\r\n\r\n            this.__.plugins[pluginType].delete(pluginName);\r\n        }else{\r\n\t        const pname = lqHelpers.string.capitalizeFirst(pluginType);\r\n\t        this.__.ifStrict(() => throw new InvalidArgumentError(`${pname} plugin \"${pluginName}\" is not registered`));\r\n        }\r\n\r\n\t    return this;\r\n    }\r\n\r\n    /**\r\n     * Clone the lightquery factory (e.g. to have two separate sets of plugins)\r\n     * @returns {LightqueryFactory}\r\n     */\r\n    cloneLightquery(){\r\n\t    return new LightqueryFactory(this.__.collectionClass, this.__.strictMode);\r\n    }\r\n\r\n    /**\r\n     * Determine whether or not strict mode is on\r\n     * @returns {boolean}\r\n     */\r\n    isStrictModeOn(){\r\n        return !!this.__.strictMode;\r\n    }\r\n\r\n    /**\r\n     * Set strict mode to the given value\r\n     * @param {boolean} newValue - Whether it should be ON or OFF\r\n     * @returns {LightqueryFactory}\r\n     */\r\n    setStrictMode(newValue){\r\n        if(typeof newValue !== \"boolean\"){\r\n            this.__.ifStrict(() => throw new InvalidArgumentError(`Expected newValue to be a boolean in LightqueryFactory#setStrictMode(newValue)`));\r\n        }\r\n\r\n        this.__.strictMode = newValue;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Enable strict mode\r\n     * @returns {LightqueryFactory}\r\n     */\r\n    turnStrictModeOn(){\r\n        return this.setStrictMode(true);\r\n    }\r\n\r\n    /**\r\n     * Disable strict mode\r\n     * @returns {LightqueryFactory}\r\n     */\r\n    turnStrictModeOff(){\r\n        return this.setStrictMode(false);\r\n    }\r\n\r\n\t/**\r\n\t * Execute a function without strict mode\r\n\t * @param {Callback} callback - The function to execute\r\n\t * @returns {LightqueryFactory}\r\n\t */\r\n\tdoWithoutStrictMode(callback){\r\n\t\tif(typeof callback !== \"function\"){\r\n\t\t\tthis.__.ifStrict(() => throw new InvalidArgumentError(\"Expected callback to be a function in LightqueryFactory#doWithoutStrictMode(callback)\"));\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tconst wasStrict = this.isStrictModeOn();\r\n\t\tthis.setStrictMode(false);\r\n\t\tcallback();\r\n\t\tthis.setStrictMode(wasStrict);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Execute a callback once the DOM is fully loaded\r\n\t * @param   {Callback}             callback - The function to execute after the DOM is loaded\r\n\t * @returns {LightqueryCollection}\r\n\t */\r\n\tready(callback){\r\n\t\treturn this(document).ready(callback);\r\n\t}\r\n\r\n    /**\r\n     * Listen to resize events (includes orientation change)\r\n     * @param {EventListener} listener\r\n     * @returns {LightqueryCollection}\r\n     */\r\n\tresize(listener){\r\n\t    return this(window).resize(listener);\r\n    }\r\n\r\n\t/**\r\n\t * Help query using the given context as the selection root\r\n\t * @param   {DomElementType} context - The context to restrict to\r\n\t * @returns {LightqueryFactorySelectObject}\r\n\t */\r\n\tfrom(context){\r\n\t\treturn {\r\n\t\t\tselect: selector => this(selector, context),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n     * Extend an object using many objects\r\n     * @param   {object}    target     - The object to extend\r\n     * @param   {...object} objects - The objects to derive properties from\r\n     * @returns {object}\r\n     */\r\n\textend(target, ...objects){\r\n\t\treturn Object.assign(target, ...objects);\r\n\t}\r\n\r\n    /**\r\n     * Getter/setter for CSS variables at the root\r\n     * @param {string} variable - The CSS variable name\r\n     * @param {string|number|undefined} value - The new value\r\n     * @returns {LightqueryFactory|string|number|null}\r\n     */\r\n\tcssVar(variable, value){\r\n\t    const ret = this(document.documentElement).cssVar(variable, value);\r\n\t    return typeof value === \"undefined\" ? ret : this;\r\n    }\r\n\r\n\t/**\r\n\t * Create DOM from an HTML string\r\n\t * @param {string} htmlString - The string that contains the HTML structure to create\r\n\t * @returns {LightqueryCollection}\r\n\t */\r\n\tcreate(htmlString){\r\n\t\tconst errorFactory = () => throw new UnsupportedError(\"Cannot create DOM elements from HTML string in LightqueryFactory#create(htmlString)\");\r\n\r\n\t\tif(!document.createRange)\r\n\t\t\tthis.__.ifStrict(errorFactory);\r\n\r\n\t\tconst range = document.createRange();\r\n\r\n\t\tif(!range.createContextualFragment)\r\n\t\t\tthis.__.ifStrict(errorFactory);\r\n\r\n\t\ttry{\r\n\t\t\tconst el = range.createContextualFragment(htmlString);\r\n\t\t\treturn this(el);\r\n\t\t}catch(e){\r\n\t\t\tthis.__.ifStrict(rethrow(e));\r\n\t\t\treturn this.__.emptySelection();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default LightqueryFactory\r\n"],"file":"LightqueryFactory.js"}