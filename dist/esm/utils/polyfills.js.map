{"version":3,"sources":["../../../src/utils/polyfills.js"],"names":["polyfillMethod","constructor","methodName","method","prototype","Array","predicate","i"],"mappings":"AAAA;;;;;;;AAOA,MAAMA,cAAc,GAAG,CAACC,WAAD,EAAcC,UAAd,EAA0BC,MAA1B,KAAqC;AAC3D,MAAGD,UAAU,IAAKD,WAAW,CAACG,SAA9B,EACC;AAEDH,EAAAA,WAAW,CAACG,SAAZ,CAAsBF,UAAtB,IAAoCC,MAApC;AACA,CALD;;AAOAH,cAAc,CAACK,KAAD,EAAQ,MAAR,EAAgB,UAASC,SAAT,EAAmB;AAChD;;;AAIA,OAAI,MAAMC,CAAV,IAAe,IAAf,EAAoB;AACnB,QAAGD,SAAS,CAAC,KAAKC,CAAL,CAAD,EAAUA,CAAV,EAAa,IAAb,CAAZ,EACC,OAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACA,CAXa,CAAd;AAaAP,cAAc,CAACK,KAAD,EAAQ,OAAR,EAAiB,UAASC,SAAT,EAAmB;AACjD;;;AAIA,OAAI,MAAMC,CAAV,IAAe,IAAf,EAAoB;AACnB,QAAG,CAACD,SAAS,CAAC,KAAKC,CAAL,CAAD,EAAUA,CAAV,EAAa,IAAb,CAAb,EACC,OAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACA,CAXa,CAAd","sourceRoot":"./src/","sourcesContent":["/**\r\n * Polyfill a method\r\n * @template T\r\n * @param {Class<T>} constructor - The constructor to add the polyfill to\r\n * @param {string} methodName - The name of the method to polyfill\r\n * @param {Function} method - The function that serves as polyfill\r\n */\r\nconst polyfillMethod = (constructor, methodName, method) => {\r\n\tif(methodName in  constructor.prototype)\r\n\t\treturn;\r\n\r\n\tconstructor.prototype[methodName] = method;\r\n};\r\n\r\npolyfillMethod(Array, \"some\", function(predicate){\r\n\t/**\r\n\t * @this Array\r\n\t */\r\n\r\n\tfor(const i in this){\r\n\t\tif(predicate(this[i], i, this))\r\n\t\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n});\r\n\r\npolyfillMethod(Array, \"every\", function(predicate){\r\n\t/**\r\n\t * @this Array\r\n\t */\r\n\r\n\tfor(const i in this){\r\n\t\tif(!predicate(this[i], i, this))\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n});\r\n"],"file":"polyfills.js"}