(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{385:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"page-title"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#page-title"}},[t._v("#")]),t._v(" "+t._s(t.$page.title))]),t._v(" "),s("p",[t._v("Although one of the main concerns is to have the same mindset and philosophy as jQuery, Lightquery is not a drop-in replacement.\nOne of the major changes from in-dev to v1.0.0 is that Lightquery is now purely about DOM manipulation, no longer can you\nuse it as a fancy wrapper around arrays (like "),s("code",[t._v("µ([1,2,3])")]),t._v(" used to be valid).")]),t._v(" "),s("p",[t._v("Many things jQuery does bug me, for instance the "),s("code",[t._v("$.each")]),t._v(" that allow for traversing array-like and objects is nice but\nis it really needed? Does it make sense with how it's designed? If you used "),s("code",[t._v('$("mySelector).each')]),t._v(" you know how painful it\nis to see the index come first and the element second, it's one of the drawbacks of "),s("code",[t._v("$.each")]),t._v(": the key (or index for arrays)\ncomes first.")]),t._v(" "),s("p",[t._v("There are also things I refused to do either because it would create confusion or because it didn't suit the vision I had\nfor this library. For instance "),s("code",[t._v("$(\"<div class='btn'>CTA</div>\")")]),t._v(" creates a DOM node waiting to be attached, this creates confusion\nbecause it is a string (virtually indistinguishable from a CSS selector). For this specific instance I opted for the alternative\n"),s("code",[t._v("µ.create(\"<div class='btn'>CTA</div>\")")]),t._v(" which is designed to work with HTML strings and leaves "),s("code",[t._v('µ("some string")')]),t._v("\nto be a CSS selector.")]),t._v(" "),s("h2",{attrs:{id:"the-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-classes"}},[t._v("#")]),t._v(" The classes")]),t._v(" "),s("p",[s("code",[t._v("µ")]),t._v(" (or "),s("code",[t._v("lq")]),t._v(", or "),s("code",[t._v("$")]),t._v(", or "),s("code",[t._v("lightquery")]),t._v(") is an instance of "),s("code",[t._v("LightqueryFactory")]),t._v(" which is a callable type.\nThe result of a call of "),s("code",[t._v("µ")]),t._v(" is a "),s("code",[t._v("LightqueryCollection")]),t._v(" which is iterable and an array-like type (it has 0-based integer indexing and a length).")]),t._v(" "),s("p",[t._v("There are two implementation details classes: "),s("code",[t._v("LightqueryFactoryImplDetails")]),t._v(" and "),s("code",[t._v("LightqueryCollectionImplDetails")]),t._v(".\nThe two main classes have a property "),s("code",[t._v("__")]),t._v(" that is an instance of their respective implementation details class.")]),t._v(" "),s("h2",{attrs:{id:"strict-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strict-mode"}},[t._v("#")]),t._v(" Strict mode")]),t._v(" "),s("p",[t._v("There's this new thing called strict mode, it's enabled by default and what that means is that if you do anything,\nand I do mean "),s("em",[t._v("anything")]),t._v(" wrong, it will blow up on you (either by throwing an exception or, on some rare occasion, return null or undefined).")]),t._v(" "),s("p",[t._v("There's an API to play with it if you want (on "),s("code",[t._v("LightqueryFactory")]),t._v("):")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("isStrictModeOn")])]),t._v(" "),s("li",[s("code",[t._v("setStrictMode")])]),t._v(" "),s("li",[s("code",[t._v("turnStrictModeOn")])]),t._v(" "),s("li",[s("code",[t._v("turnStrictModeOff")])])]),t._v(" "),s("p",[t._v("If you develop plugins please do use this API to provide consistency in error handling. You also have "),s("code",[t._v("µ.__.ifStrict")]),t._v(" that\ncan execute a callback if strict mode is on (useful for throwing exceptions for instance), there's also "),s("code",[t._v('µ("any selector").__.ifStrict')]),t._v("\nthat serves the same purpose.")]),t._v(" "),s("p",[t._v("The philosophy behind it is that when it's off, it behaves mostly like jQuery: swallowing down errors and using noops.")]),t._v(" "),s("h2",{attrs:{id:"the-plugin-system"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-plugin-system"}},[t._v("#")]),t._v(" The plugin system")]),t._v(" "),s("p",[t._v("Oh boy did I not want to let this baby go. Recently, using mostly dynamically typed languages, I've had a bit of fun with\nmagic/runtime defined methods. It's truly a shame there is not much support for typing those things (or proper extension methods)\nbecause it often becomes hell to add type information about these.")]),t._v(" "),s("p",[t._v("Anyway, the plugin system works just like before, except I removed the aliases we now only have "),s("code",[t._v("registerPlugin")]),t._v(",\n"),s("code",[t._v("hasPlugin")]),t._v(" and "),s("code",[t._v("removePlugin")]),t._v(" all defined on "),s("code",[t._v("LightqueryFactory")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"spaced-separated-strings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spaced-separated-strings"}},[t._v("#")]),t._v(" Spaced-separated strings")]),t._v(" "),s("p",[t._v("This is a concept directly borrowed from jQuery: strings that group multiple elements using space(s) as separator.\nFor instance, after parsing, "),s("code",[t._v("my class name")]),t._v("  becomes "),s("code",[t._v('["my", "class", "name"]')]),t._v(". It's just syntactic sugar for users\nto be able to pass multiple string arguments without using an array.")]),t._v(" "),s("h2",{attrs:{id:"method-string-invokables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-string-invokables"}},[t._v("#")]),t._v(" Method-string invokables")]),t._v(" "),s("p",[t._v("This is a concept that is not new and is mainly derived from Laravel's "),s("a",{attrs:{href:"https://laravel.com/docs/8.x/collections#higher-order-messages",target:"_blank",rel:"noopener noreferrer"}},[t._v("Higher Order Messages"),s("OutboundLink")],1),t._v(".\nAny method that has a signature like the one that follows allows method-string invokables:")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("This allows to invoke method on "),s("code",[t._v("LightqueryCollection")]),t._v(" instances as a very handy shortcut, for instance let's expand the following example:")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" lazyLoadObserver "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntersectionObserver")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* [...] */")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("µ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hasData"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("each")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" lazyLoadObserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is equivalent to")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("µ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("µ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("each")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" lazyLoadObserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"compatibilities-with-jquery"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compatibilities-with-jquery"}},[t._v("#")]),t._v(" Compatibilities with jQuery")]),t._v(" "),s("p",[t._v("I maintained the function signatures for most methods where it made sense and did not bug me in any way. Some methods are missing,\nsome have somewhat different meanings, some have been renamed, some have been replaced by similar features but differently designed.")])])}),[],!1,null,null,null);e.default=n.exports}}]);